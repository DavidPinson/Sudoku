using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Sudoku.DP;
using Sudoku.Interface;

// https://www.sudopedia.org/wiki/Naked_Triple
// https://www.sudopedia.org/wiki/Naked_Pair
// https://www.sudopedia.org/wiki/Hidden_Single
// https://www.sudopedia.org/wiki/Naked_Single
// https://www.sudopedia.org/wiki/Locked_Candidates
// http://www.angusj.com/sudoku/hints.php
// https://www.e-sudoku.fr/grille-de-sudoku.php

namespace Sudoku.Benchmark
{
  class Program
  {
    private static readonly List<Tuple<string, string>> _puzzles = new()
    {
      new Tuple<string, string>("698500012070020090000018607006092003002000700700480200209160000060040080410003926", "698537412173624895524918637856792143942351768731486259289165374367249581415873926"),
      new Tuple<string, string>("026780000000003460000056000090000200730090058002000040000940000087200000000061370", "426789513578123469913456782891574236734692158652318947365947821187235694249861375"),
      new Tuple<string, string>("004300209005009001070060043006002087190007400050083000600000105003508690042910300", "864371259325849761971265843436192587198657432257483916689734125713528694542916378"),
      new Tuple<string, string>("040100050107003960520008000000000017000906800803050620090060543600080700250097100", "346179258187523964529648371965832417472916835813754629798261543631485792254397186"),
      new Tuple<string, string>("600120384008459072000006005000264030070080006940003000310000050089700000502000190", "695127384138459672724836915851264739273981546946573821317692458489715263562348197"),
      new Tuple<string, string>("497200000100400005000016098620300040300900000001072600002005870000600004530097061", "497258316186439725253716498629381547375964182841572639962145873718623954534897261"),
      new Tuple<string, string>("005910308009403060027500100030000201000820007006007004000080000640150700890000420", "465912378189473562327568149738645291954821637216397854573284916642159783891736425"),
      new Tuple<string, string>("100005007380900000600000480820001075040760020069002001005039004000020100000046352", "194685237382974516657213489823491675541768923769352841215839764436527198978146352"),
      new Tuple<string, string>("009065430007000800600108020003090002501403960804000100030509007056080000070240090", "289765431317924856645138729763891542521473968894652173432519687956387214178246395"),
      new Tuple<string, string>("000000657702400100350006000500020009210300500047109008008760090900502030030018206", "894231657762495183351876942583624719219387564647159328128763495976542831435918276")

100080006709102000000000204001590000064003075008024030050000102030050800002678059,
      123485796749162583685937214371596428264813975598724631857349162936251847412678359
020049001009003270704006050800600003060050427051300900007000040305908060180002000,
      528749631619583274734216859872694513963851427451327986297165348345978162186432795
085090060040700091201006370006039040000000800079041005050080400002507000310004002,
      785193264643728591291456378526839147134675829879241635957382416462517983318964752
003080209000700800750402600900175040031009067500060002000950000270030015100600480,
      413586279629713854758492631962175348831249567547368192384951726276834915195627483
040000709070590032050700600102630040000284003600000500020407016500800090003029000,
      246318759871596432359742681182635947795284163634971528928457316517863294463129875
610300005004050380008201006162000059000006070900504002090780000453190800070000203,
      619348725724659381538271946162837459345926178987514632296783514453192867871465293
270005030000080540004613080050067004309001600400920001006030020980200000100004907,
      278495136613782549594613782851367294329541678467928351746139825985276413132854967
800506000000020680203090004402001860790300000008002705001708020300160000000034059,
      874516932519423687263897514452971863796385241138642795941758326325169478687234159
000150470020060090706004001200630800075908030810200004094000008507003620000000305,
      938152476421867593756394281249631857675948132813275964394526718587413629162789345


400000012003600070900850600009010004070003006582006009340009080001280005026700400,
      468397512253641978917852643639518724174923856582476139345169287791284365826735491
000028076980700500000400023003680000801009400057204090200800005060030100300971080,
      534128976982763514176495823493687251821359467657214398219846735768532149345971682
020600070406970000003002501000049080800760013015030900702010306009800054540000008,
      128653479456971832973482561237149685894765213615238947782514396369827154541396728
005090040030206000180300070004030698000074030620001000340009010000028900806050407,
      265897341437216589189345276714532698958674132623981754342769815571428963896153427
400030501700009020005260004080070690300405200100002080010000740078050000940300806,
      429738561761549328835261974284173695396485217157692483513826749678954132942317856
090340802005060000070500900800400003057090104000001025061070030209030460040029008,
      196347852425968371378512946812456793657293184934781625561874239289135467743629518
471290005000004600650810009500700003002003017009600500085002004027900000140300800,
      471296385298534671653817429514789263862453917739621548985162734327948156146375892
401680000250004300009200007000000200700040016006931800080009650030050040005378190,
      471683925258794361369215487814567239793842516526931874187429653932156748645378192
700002500043900100000080069000200048080001020605070300900046007507300014210590006,
      796412583843965172152783469371259648489631725625874391938146257567328914214597836

200000500030721006478500000014206003000980000590104807709400065050800210000003000,
      261348579935721486478569132814276953327985641596134827789412365653897214142653798
206098700010000380000320006650009001007430005924500070500700240700960030008005010,
      236198754419657382875324196653879421187432965924516873561783249742961538398245617
100008000005600070870030940002300890350040207094001560003002080900503001400780006,
      149278635235694178876135942612357894358946217794821563563412789987563421421789356
300800007001056000802700400060420008005080090907010300709500014000003859010042006,
      356894127471256983892731465163429578245387691987615342739568214624173859518942736
020908040765040900480702001900000000000106073008000502037800619102003405000500000,
      321958746765341928489762351973285164254196873618437592537824619192673485846519237
604000002000980060050607030003750104801040000020006793000003840000175600592000007,
      684531972237984561159627438963752184871349256425816793716293845348175629592468317
600100040340605007010003800058904030000020796062010005003049000001800052090000070,
      687192543349685127215473869758964231134528796962317485523749618471836952896251374
000300902600428010005067000090100830048506200701040009003000507802034090004001008,
      487315962639428715215967483596172834348596271721843659163289547852734196974651328
410572080390004600000060070071006250500008003900401000000000702020109040605030908,
      416572389397814625258963471871396254564728193932451867189645732723189546645237918

610280070080009001020370096105720600007003080090400037040000320000510000806900004,
      619285473783649251524371896135728649467193582298456137941867325372514968856932714
023085009000406201408001700070090030084070905030002406600500028009010000050007000,
      123785649795436281468921753576194832284673915931852476617549328349218567852367194
007090006003502000290400085060709040000000190800050020510030800300610470006024301,
      457198236683572914291463785162789543735246198849351627514937862328615479976824351
000750960000800704304020001090000000027930400010402380000001005900360000206090037,
      182754963569813724374629851493186572827935416615472389738241695951367248246598137
300028000029000030005400107740203098008607003100000004000091602500700480061050070,
      317528946429176835685439127746213598958647213132985764874391652593762481261854379
003000600004086005700000940935040720806720050200300190601900004000800000002135800,
      523497681194286375768513942935641728816729453247358196681972534359864217472135869
000350820061804030050009000070060002903007010005020900007130065000090408086700000,
      749356821261874539358219746874961352923587614615423987497138265132695478586742193
070200690003040001000065020560030000094700580010020406000108040051003900940600007,
      475281693623947851189365724562834179394716582817529436736198245251473968948652317
300401620100080400005020830057800000000700503002904007480530010203090000070006090,
      398471625126385479745629831657813942914762583832954167489537216263198754571246398


    };

    static async Task Main()
    {
      try
      {
        ISudokuEngine engine = new SimpleEngineDP();
        await TestSudokuEngineAsync(engine, "SimpleEngineDP").ConfigureAwait(false);
      }
      catch(Exception ex)
      {
        Console.WriteLine($"Error, msg: {ex.Message}, stacktrace: {ex.StackTrace}");
      }
    }

    static async Task TestSudokuEngineAsync(ISudokuEngine engine, string name)
    {
      Console.WriteLine();
      Console.WriteLine($"----------------------------------------------");
      Console.WriteLine($"{name}");
      Console.WriteLine($"----------------------------------------------");
      Console.WriteLine();

      Tuple<bool, string> solvedReturn;
      foreach(Tuple<string, string> t in _puzzles)
      {
        solvedReturn = await engine.SolveAsync(t.Item1).ConfigureAwait(false);
        if(solvedReturn.Item1 == true)
        {
          if(t.Item2.Equals(solvedReturn.Item2) == true)
          {
            Console.WriteLine($"SOLVED");
          }
          else
          {
            Console.WriteLine($"Problem: solver think it solved the puzzle but it's wrong");
          }
        }
        else
        {
          Console.WriteLine($"Solver did not solved the puzzle");
        }
      }
    }

  }
}
